import logging
logging.getLogger('matplotlib.font_manager').disabled = True

import ipywidgets as widgets  # interactive display
%config InlineBackend.figure_format = 'retina'
plt.style.use("https://raw.githubusercontent.com/NeuromatchAcademy/course-content/main/nma.mplstyle")

def default_pars(**kwargs):
  pars = {}

 # Excitatory parameters
  pars['tau_E1'] = 2.     # Timescale of the E1 population [ms]
  pars['a_E1'] = 1.2      # Gain of the E1 population
  pars['theta_E1'] = 2.8  # Threshold of the E1 population
  pars['tau_E2'] = 2.     # Timescale of the E2 population [ms]
  pars['a_E2'] = 1.2      # Gain of the E2 population
  pars['theta_E2'] = 2.8  # Threshold of the E2 population

  # Inhibitory parameters
  pars['tau_I'] = 1.0    # Timescale of the I population [ms]
  pars['a_I'] = 1.0      # Gain of the I population
  pars['theta_I'] = 4.0  # Threshold of the I population
  pars['gamma'] = 5.       # Slope of the linear input-output function

  # Connection strength
  pars['wE1E1'] = 2.   # E1 to E1
  pars['wE2E2'] = 1.   # E2 to E2
  pars['wE1E2'] = 0    # E1 to E2
  pars['wE2E1'] = 0    # E2 to E0
  pars['wE1I'] = 1.8   # I to E1
  pars['wE2I'] = -1.5   # I to E2
  pars['wIE1'] = 2.  # E1 to I
  pars['wIE2'] = -1.4  # E2 to I
  pars['wII'] = 0.  # I to I

  # External input
  pars['I_ext_E1'] = 1.
  pars['I_ext_E2'] = 4.
  pars['I_ext_I'] = 0.

  # simulation parameters
  pars['T'] = 50.        # Total duration of simulation [ms]
  pars['dt'] = .1        # Simulation time step [ms]
  pars['rE1_init'] = 0.2  # Initial value of E1
  pars['rE2_init'] = 0.2  # Initial value of E2
  pars['rI_init'] = 0.1  # Initial value of I

  # External parameters if any
  for k in kwargs:
      pars[k] = kwargs[k]

  # Vector of discretized time points [ms]
  pars['range_t'] = np.arange(0, pars['T'], pars['dt'])

  return pars


def F(x, a, theta):
  """
  Population activation function, F-I curve

  Args:
    x     : the population input
    a     : the gain of the function
    theta : the threshold of the function

  Returns:
    f     : the population activation response f(x) for input x
  """

  # add the expression of f = F(x)
  f = (1 + np.exp(-a * (x - theta)))**-1 - (1 + np.exp(a * theta))**-1

  return f


def dF(x, a, theta):
  """
  Derivative of the population activation function.

  Args:
    x     : the population input
    a     : the gain of the function
    theta : the threshold of the function

  Returns:
    dFdx  :  Derivative of the population activation function.
  """

  dFdx = a * np.exp(-a * (x - theta)) * (1 + np.exp(-a * (x - theta)))**-2

  return dFdx

##############################

def plot_FI_inverse(x, a, theta):
  f, ax = plt.subplots()
  ax.plot(x, F_inv(x, a=a, theta=theta))
  ax.set(xlabel="$x$", ylabel="$F^{-1}(x)$")


def plot_FI_EI(x, FI_exc1, FI_exc2, FI_inh):
  plt.figure()
  plt.plot(x, FI_exc1, 'b', label='E1 population')
  plt.plot(x, FI_exc2, 'b', label='E2 population')
  plt.plot(x, FI_inh, 'r', label='I population')
  plt.legend(loc='lower right')
  plt.xlabel('x (a.u.)')
  plt.ylabel('F(x)')
  plt.show()


def my_test_plot(t, rE1, rI1, rE2, rI2):

  plt.figure()
  ax1 = plt.subplot(211)
  ax1.plot(pars['range_t'], rE1, 'b', label='E1 population')
  ax1.plot(pars['range_t'], rE2, 'g', label='E2 population')
  ax1.plot(pars['range_t'], rI1, 'r', label='I population')
  ax1.set_ylabel('Activity')
  ax1.legend(loc='best')

  ax2 = plt.subplot(212, sharex=ax1, sharey=ax1)
  ax2.plot(pars['range_t'], rE1, 'b', label='E1 population')
  ax2.plot(pars['range_t'], rE2, 'g', label='E2 population')
  ax2.plot(pars['range_t'], rI2, 'r', label='I population')
  ax2.set_xlabel('t (ms)')
  ax2.set_ylabel('Activity')
  ax2.legend(loc='best')

  plt.tight_layout()
  plt.show()


def plot_nullclines(Exc_null_rE, Exc_null_rI, Inh_null_rE, Inh_null_rI):

  plt.figure()
  plt.plot(Exc_null_rE, Exc_null_rI, 'r', label='E1 nullcline')
  plt.plot(Inh_null_rE, Inh_null_rI, 'g', label='E2 nullcline')
  plt.xlabel(r'$r_E1$')
  plt.ylabel(r'$r_E2$')
  plt.legend(loc='best')
  plt.show()

def my_plot_nullcline(pars):
  Exc1_null_rE1 = np.linspace(-0.01, 0.96, 100)
  Exc1_null_rE2 = get_E1_nullcline(Exc1_null_rE1, **pars)
  Exc2_null_rE2 = np.linspace(-.01, 0.96, 100)
  Exc2_null_rE1 = get_E2_nullcline(Exc2_null_rE2, **pars)

  # Compute nullclines
  plt.plot(Exc1_null_rE1, Exc1_null_rE2, 'r', label='E1 nullcline')
  plt.plot(Exc2_null_rE1, Exc2_null_rE2, 'g', label= 'E2 nullcline')
  plt.xlabel(r'$r_E1$')
  plt.ylabel(r'$r_E2$')
  plt.legend(loc='best')


def my_plot_vector(pars, my_n_skip=2, myscale=5): #need to work on this?
  EI_grid = np.linspace(0., 1., 20)
  rE, rI = np.meshgrid(EI_grid, EI_grid)
  drEdt, drIdt = EIderivs(rE, rI, **pars)

  n_skip = my_n_skip

  plt.quiver(rE[::n_skip, ::n_skip], rI[::n_skip, ::n_skip],
             drEdt[::n_skip, ::n_skip], drIdt[::n_skip, ::n_skip],
             angles='xy', scale_units='xy', scale=myscale, facecolor='c')

  plt.xlabel(r'$r_E$')
  plt.ylabel(r'$r_I$')


def my_plot_trajectory(pars, mycolor, x_init, mylabel):
  pars = pars.copy()
  pars['rE1_init'], pars['rE2_init'], pars['rI_init'] = x_init[0], x_init[1], x_init[2]
  rE1_tj, rE2_tj, rI_tj = simulate_wc(**pars)

  plt.plot(rE1_tj, rE2_tj, color=mycolor, label=mylabel)
  plt.plot(x_init[0], x_init[1], x_init[2], 'o', color=mycolor, ms=8)
  plt.xlabel(r'$r_E$')
  plt.ylabel(r'$r_I$')


def my_plot_trajectories(pars, dx, n, mylabel):
  """
  Solve for I along the E_grid from dE/dt = 0.

  Expects:
  pars    : Parameter dictionary
  dx      : increment of initial values
  n       : n*n trjectories
  mylabel : label for legend

  Returns:
    figure of trajectory
  """
  pars = pars.copy()
  for ie in range(n):
    for ii in range(n):
      pars['rE1_init'], pars['rE2_init'] = dx * ie, dx * ii
      rE1_tj, rE2_tj,_ = simulate_wc(**pars)
      if (ie == n-1) & (ii == n-1):
          plt.plot(rE1_tj, rE2_tj, 'gray', alpha=0.8, label=mylabel)
      else:
          plt.plot(rE1_tj, rE2_tj, 'gray', alpha=0.8)

  plt.xlabel(r'$r_E1$')
  plt.ylabel(r'$r_E2$')


def plot_complete_analysis(pars):
  plt.figure(figsize=(7.7, 6.))

  # plot example trajectories
  my_plot_trajectories(pars, 0.2, 10,
                       'Sample trajectories \nfor different init. conditions')
  # my_plot_trajectory(pars, 'm', [0.6, 0.6, 0.8],
  #                    'Sample trajectory for \nlow activity')
  # my_plot_trajectory(pars, 'orange', [0.6, 0.6, 0.6],
  #                    'Sample trajectory for \nhigh activity')

  # plot nullclines
  my_plot_nullcline(pars)

  # plot vector field
  EI_grid = np.linspace(0., 1., 20)
  rE1, rE2 = np.meshgrid(EI_grid, EI_grid)
  drE1dt, drE2dt = EIderivs(rE1, rE2, **pars)
  n_skip = 2
  plt.quiver(rE1[::n_skip, ::n_skip], rE2[::n_skip, ::n_skip],
             drE1dt[::n_skip, ::n_skip], drE2dt[::n_skip, ::n_skip],
             angles='xy', scale_units='xy', scale=5., facecolor='c')
  plt.xlim(-0.05,1)
  plt.ylim(-0.05,1)
  plt.legend(loc=[1.02, 0.57], handlelength=1)
  plt.show()


def plot_fp(x_fp, position=(0.02, 0.1), rotation=0):
  plt.plot(x_fp[0], x_fp[1], 'ko', ms=8)
  plt.text(x_fp[0] + position[0], x_fp[1] + position[1],
           f'Fixed Point1=\n({x_fp[0]:.3f}, {x_fp[1]:.3f})',
           horizontalalignment='center', verticalalignment='bottom',
           rotation=rotation)

