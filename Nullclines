def get_E1_nullcline(rE1, gamma, a_E1, theta_E1, wE1E1, wE1E2, wE2E1, wE2E2, wE1I, wE2I, wII, wIE1, wIE2, I_ext_E1, I_ext_I, **other_pars):
  """
  Solve for rE2 along the rE1 from drE1/dt = 0.

  Args:
    rE    : response of excitatory population
    a_E, theta_E, wEE, wEI, I_ext_E : Wilson-Cowan excitatory parameters
    Other parameters are ignored

  Returns:
    rI    : values of inhibitory population along the nullcline on the rE
  """
  # calculate rE2
  rE2 = (1/(wE1E2 - ((gamma * wE1I * wIE2)/(1+gamma*wII))))*(F_inv(rE1, a_E1, theta_E1)-wE1E1*rE1 + (gamma*wE1I/(1+gamma*wII))*(wIE1*rE1 + I_ext_I) - I_ext_E1)

  return rE2


def get_E2_nullcline(rE2, gamma, a_E2, theta_E2, wE1E1, wE1E2, wE2E1, wE2E2, wE1I, wE2I, wII, wIE1, wIE2, I_ext_E2, I_ext_I, **other_pars):
  """
  Solve for rE1 along the rE2 from drE2/dt = 0.

  Args:
    rI    : response of inhibitory population
    a_I, theta_I, wIE, wII, I_ext_I : Wilson-Cowan inhibitory parameters
    Other parameters are ignored

  Returns:
    rE    : values of the excitatory population along the nullcline on the rI
  """

  # calculate rE1
  rE1 = (1/(wE2E1 - ((gamma * wE2I * wIE1)/(1+gamma*wII))))*(F_inv(rE2, a_E2, theta_E2)-wE2E2*rE2 + (gamma*wE2I/(1+gamma*wII))*(wIE2*rE2 + I_ext_I) - I_ext_E2)

  return rE1


# Set parameters
pars = default_pars()
Exc1_null_rE1 = np.linspace(-0.01, 0.96, 100)
Exc2_null_rE2 = np.linspace(-0.01, 0.96, 100)

# Compute nullclines
Exc1_null_rE2 = get_E1_nullcline(Exc1_null_rE1, **pars)
Exc2_null_rE1 = get_E2_nullcline(Exc2_null_rE2, **pars)

# Visualize
plot_nullclines(Exc1_null_rE1, Exc1_null_rE2, Exc2_null_rE1, Exc2_null_rE2)


